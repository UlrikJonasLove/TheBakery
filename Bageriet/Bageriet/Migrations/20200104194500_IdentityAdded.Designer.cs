// <auto-generated />
using System;
using Bageriet.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bageriet.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200104194500_IdentityAdded")]
    partial class IdentityAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bageriet.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Bröd"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Kakor"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Tårtor"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Mat"
                        });
                });

            modelBuilder.Entity("Bageriet.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Average")
                        .HasColumnType("real");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Count")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProductOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<float>("Ratings")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Average = 0f,
                            CategoryId = 1,
                            Count = 0f,
                            Description = "Riktigt gott bröd!",
                            ImageThumbnailUrl = "https://goldbelly.imgix.net/uploads/merchant/main_image/778/hot-bread-kitchen.05560fd0bcbc5b3bb726f649c9ee7124.jpg?ixlib=react-8.6.4&auto=format&fit=crop&h=534&w=1150",
                            ImageUrl = "https://goldbelly.imgix.net/uploads/merchant/main_image/778/hot-bread-kitchen.05560fd0bcbc5b3bb726f649c9ee7124.jpg?ixlib=react-8.6.4&auto=format&fit=crop&h=534&w=1150",
                            IsProductOfTheWeek = true,
                            Name = "Bagarens favorit!",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 2,
                            Average = 0f,
                            CategoryId = 1,
                            Count = 0f,
                            Description = "Riktigt gott surdegsbröd!",
                            ImageThumbnailUrl = "https://mittkok.expressen.se/wp-content/uploads/2016/04/surdeg.jpg",
                            ImageUrl = "https://mittkok.expressen.se/wp-content/uploads/2016/04/surdeg.jpg",
                            IsProductOfTheWeek = true,
                            Name = "Surdegsbröd!",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 3,
                            Average = 0f,
                            CategoryId = 1,
                            Count = 0f,
                            Description = "Mörkt sommarbröd med bär!",
                            ImageThumbnailUrl = "https://img.koket.se/media/morkt-sommarbrod.jpg",
                            ImageUrl = "https://img.koket.se/media/morkt-sommarbrod.jpg",
                            IsProductOfTheWeek = false,
                            Name = "Sommarhimlen",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 4,
                            Average = 0f,
                            CategoryId = 2,
                            Count = 0f,
                            Description = "Kaka med choklad!",
                            ImageThumbnailUrl = "https://www.jennysmatblogg.nu/wp-content/uploads/img_1974-2.jpg",
                            ImageUrl = "https://www.jennysmatblogg.nu/wp-content/uploads/img_1974-2.jpg",
                            IsProductOfTheWeek = true,
                            Name = "Chokladrutor",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 5,
                            Average = 0f,
                            CategoryId = 2,
                            Count = 0f,
                            Description = "Smarrig äppelkaka!",
                            ImageThumbnailUrl = "https://www.viaventri.se/wp-content/uploads/2018/08/IMG_4970-kopia.jpg",
                            ImageUrl = "https://www.viaventri.se/wp-content/uploads/2018/08/IMG_4970-kopia.jpg",
                            IsProductOfTheWeek = false,
                            Name = "Äppelkaka",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 6,
                            Average = 0f,
                            CategoryId = 2,
                            Count = 0f,
                            Description = "Bästa sockerkakan i Sverige!",
                            ImageThumbnailUrl = "https://img.koket.se/media/hur-bakar-man-sockerkaka.jpg",
                            ImageUrl = "https://img.koket.se/media/hur-bakar-man-sockerkaka.jpg",
                            IsProductOfTheWeek = true,
                            Name = "Sockerkaka",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 7,
                            Average = 0f,
                            CategoryId = 3,
                            Count = 0f,
                            Description = "Tårta med marängsmörkräm!",
                            ImageThumbnailUrl = "https://img.koket.se/media/fantastiska-tartor.jpg",
                            ImageUrl = "https://img.koket.se/media/fantastiska-tartor.jpg",
                            IsProductOfTheWeek = false,
                            Name = "Hallontårta",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 8,
                            Average = 0f,
                            CategoryId = 3,
                            Count = 0f,
                            Description = "Tårta med smak av jasmin!",
                            ImageThumbnailUrl = "https://img.koket.se/mobile/stencildekoration-pa-tarta-se-gor.jpg",
                            ImageUrl = "https://img.koket.se/mobile/stencildekoration-pa-tarta-se-gor.jpg",
                            IsProductOfTheWeek = true,
                            Name = "Jasmintårta",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 9,
                            Average = 0f,
                            CategoryId = 3,
                            Count = 0f,
                            Description = "Chokladtårta med utsökt delikatess!",
                            ImageThumbnailUrl = "https://www.kenwoodworld.com/Global/recipes/Recipe%20Images/titanium/Chocolate-Cake.jpg",
                            ImageUrl = "https://www.kenwoodworld.com/Global/recipes/Recipe%20Images/titanium/Chocolate-Cake.jpg",
                            IsProductOfTheWeek = true,
                            Name = "Paradistårta",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 10,
                            Average = 0f,
                            CategoryId = 4,
                            Count = 0f,
                            Description = "Pizza med italiensk pepperoni!",
                            ImageThumbnailUrl = "https://img1.cookinglight.timeinc.net/sites/default/files/styles/medium_2x/public/1563392585/pepperoni-skillet-pizza-1907.jpg?itok=l_08ukf0",
                            ImageUrl = "https://img1.cookinglight.timeinc.net/sites/default/files/styles/medium_2x/public/1563392585/pepperoni-skillet-pizza-1907.jpg?itok=l_08ukf0",
                            IsProductOfTheWeek = false,
                            Name = "Pepperoni pizza",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 11,
                            Average = 0f,
                            CategoryId = 4,
                            Count = 0f,
                            Description = "Vegetarisk pizza med mozerella",
                            ImageThumbnailUrl = "https://st2.depositphotos.com/4208641/7406/i/950/depositphotos_74061695-stock-photo-vegetarian-pizza-with-mozzarella-and.jpg",
                            ImageUrl = "https://st2.depositphotos.com/4208641/7406/i/950/depositphotos_74061695-stock-photo-vegetarian-pizza-with-mozzarella-and.jpg",
                            IsProductOfTheWeek = true,
                            Name = "Vegetarisk pizza",
                            Price = 0,
                            Ratings = 0f
                        },
                        new
                        {
                            ProductId = 12,
                            Average = 0f,
                            CategoryId = 4,
                            Count = 0f,
                            Description = "Supergod pizza med skinka och ost!",
                            ImageThumbnailUrl = "https://imgs.aftonbladet-cdn.se/v2/images/26753b77-44ff-4d8b-bfb6-cf57fe26ecac?fit=crop&h=442&q=50&w=600&s=89af9ba3747ae09a577ca1b8e81e10543bde2a32",
                            ImageUrl = "https://imgs.aftonbladet-cdn.se/v2/images/26753b77-44ff-4d8b-bfb6-cf57fe26ecac?fit=crop&h=442&q=50&w=600&s=89af9ba3747ae09a577ca1b8e81e10543bde2a32",
                            IsProductOfTheWeek = true,
                            Name = "Vesuvio pizza",
                            Price = 0,
                            Ratings = 0f
                        });
                });

            modelBuilder.Entity("Bageriet.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartitemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartitemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bageriet.Models.Product", b =>
                {
                    b.HasOne("Bageriet.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bageriet.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("Bageriet.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
